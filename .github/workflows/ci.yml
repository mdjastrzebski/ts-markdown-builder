name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: ['**']

permissions:
  pull-requests: write

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint and Typecheck
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Lint files
        run: yarn lint

      - name: Typecheck files
        run: yarn typecheck

  test:
    runs-on: ubuntu-latest
    name: Test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Run unit tests
        run: yarn test --maxWorkers=2 --coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build-library:
    runs-on: ubuntu-latest
    name: Build Library
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Build package
        run: yarn build

      - name: Calculate Size
        if: github.event_name == 'pull_request'
        uses: andresz1/size-limit-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run script
        run: |
          echo $PWD
          echo $CWD
          ls -la
          output=$(./scripts/test-markdown.mjs)
          echo "TEST_OUTPUT<<EOF" >> $GITHUB_ENV
          echo "$output" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Update or Create Comment
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            const issueNumber = context.issue.number
            const owner = context.repo.owner
            const repo = context.repo.repo

            const commentBody = `Script Output:\n\`\`\`\n${process.env.SCRIPT_OUTPUT}\n\`\`\``

            const { data: comments } = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: issueNumber
            })

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Script Output:')
            )

            if (botComment) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: botComment.id,
                body: commentBody
              })
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issueNumber,
                body: commentBody
              })
            }
